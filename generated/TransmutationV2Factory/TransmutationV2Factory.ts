// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SummonTransmutation extends ethereum.Event {
  get params(): SummonTransmutation__Params {
    return new SummonTransmutation__Params(this);
  }
}

export class SummonTransmutation__Params {
  _event: SummonTransmutation;

  constructor(event: SummonTransmutation) {
    this._event = event;
  }

  get transmutation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get moloch(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get details(): string {
    return this._event.parameters[3].value.toString();
  }

  get distributionToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get capitalToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class TransmutationV2Factory__minionsResult {
  value0: Address;
  value1: string;

  constructor(value0: Address, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class TransmutationV2Factory extends ethereum.SmartContract {
  static bind(address: Address): TransmutationV2Factory {
    return new TransmutationV2Factory("TransmutationV2Factory", address);
  }

  minionList(param0: BigInt): Address {
    let result = super.call("minionList", "minionList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_minionList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("minionList", "minionList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minions(param0: Address): TransmutationV2Factory__minionsResult {
    let result = super.call("minions", "minions(address):(address,string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new TransmutationV2Factory__minionsResult(
      result[0].toAddress(),
      result[1].toString()
    );
  }

  try_minions(
    param0: Address
  ): ethereum.CallResult<TransmutationV2Factory__minionsResult> {
    let result = super.tryCall("minions", "minions(address):(address,string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TransmutationV2Factory__minionsResult(
        value[0].toAddress(),
        value[1].toString()
      )
    );
  }

  summonTransmutation(
    moloch: Address,
    details: string,
    distributionToken: Address,
    capitalToken: Address,
    owner: Address
  ): Address {
    let result = super.call(
      "summonTransmutation",
      "summonTransmutation(address,string,address,address,address):(address)",
      [
        ethereum.Value.fromAddress(moloch),
        ethereum.Value.fromString(details),
        ethereum.Value.fromAddress(distributionToken),
        ethereum.Value.fromAddress(capitalToken),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toAddress();
  }

  try_summonTransmutation(
    moloch: Address,
    details: string,
    distributionToken: Address,
    capitalToken: Address,
    owner: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "summonTransmutation",
      "summonTransmutation(address,string,address,address,address):(address)",
      [
        ethereum.Value.fromAddress(moloch),
        ethereum.Value.fromString(details),
        ethereum.Value.fromAddress(distributionToken),
        ethereum.Value.fromAddress(capitalToken),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SummonTransmutationCall extends ethereum.Call {
  get inputs(): SummonTransmutationCall__Inputs {
    return new SummonTransmutationCall__Inputs(this);
  }

  get outputs(): SummonTransmutationCall__Outputs {
    return new SummonTransmutationCall__Outputs(this);
  }
}

export class SummonTransmutationCall__Inputs {
  _call: SummonTransmutationCall;

  constructor(call: SummonTransmutationCall) {
    this._call = call;
  }

  get moloch(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[1].value.toString();
  }

  get distributionToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get capitalToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SummonTransmutationCall__Outputs {
  _call: SummonTransmutationCall;

  constructor(call: SummonTransmutationCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
