// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Propose extends ethereum.Event {
  get params(): Propose__Params {
    return new Propose__Params(this);
  }
}

export class Propose__Params {
  _event: Propose;

  constructor(event: Propose) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Deploy extends ethereum.Event {
  get params(): Deploy__Params {
    return new Deploy__Params(this);
  }
}

export class Deploy__Params {
  _event: Deploy;

  constructor(event: Deploy) {
    this._event = event;
  }

  get moloch(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get giveToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get getToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Transmutation extends ethereum.SmartContract {
  static bind(address: Address): Transmutation {
    return new Transmutation("Transmutation", address);
  }

  getToken(): Address {
    let result = super.call("getToken", "getToken():(address)", []);

    return result[0].toAddress();
  }

  try_getToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  giveToken(): Address {
    let result = super.call("giveToken", "giveToken():(address)", []);

    return result[0].toAddress();
  }

  try_giveToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("giveToken", "giveToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  propose(
    _applicant: Address,
    _giveAmt: BigInt,
    _getAmt: BigInt,
    _details: string
  ): BigInt {
    let result = super.call(
      "propose",
      "propose(address,uint256,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(_applicant),
        ethereum.Value.fromUnsignedBigInt(_giveAmt),
        ethereum.Value.fromUnsignedBigInt(_getAmt),
        ethereum.Value.fromString(_details)
      ]
    );

    return result[0].toBigInt();
  }

  try_propose(
    _applicant: Address,
    _giveAmt: BigInt,
    _getAmt: BigInt,
    _details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "propose",
      "propose(address,uint256,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(_applicant),
        ethereum.Value.fromUnsignedBigInt(_giveAmt),
        ethereum.Value.fromUnsignedBigInt(_getAmt),
        ethereum.Value.fromString(_details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moloch(): Address {
    let result = super.call("moloch", "moloch():(address)", []);

    return result[0].toAddress();
  }

  try_moloch(): ethereum.CallResult<Address> {
    let result = super.tryCall("moloch", "moloch():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TRANSMUTATION_DETAILS(): string {
    let result = super.call(
      "TRANSMUTATION_DETAILS",
      "TRANSMUTATION_DETAILS():(string)",
      []
    );

    return result[0].toString();
  }

  try_TRANSMUTATION_DETAILS(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "TRANSMUTATION_DETAILS",
      "TRANSMUTATION_DETAILS():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isMember(usr: Address): boolean {
    let result = super.call("isMember", "isMember(address):(bool)", [
      ethereum.Value.fromAddress(usr)
    ]);

    return result[0].toBoolean();
  }

  try_isMember(usr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMember", "isMember(address):(bool)", [
      ethereum.Value.fromAddress(usr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get _applicant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _giveAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _getAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _details(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawGiveTokenCall extends ethereum.Call {
  get inputs(): WithdrawGiveTokenCall__Inputs {
    return new WithdrawGiveTokenCall__Inputs(this);
  }

  get outputs(): WithdrawGiveTokenCall__Outputs {
    return new WithdrawGiveTokenCall__Outputs(this);
  }
}

export class WithdrawGiveTokenCall__Inputs {
  _call: WithdrawGiveTokenCall;

  constructor(call: WithdrawGiveTokenCall) {
    this._call = call;
  }
}

export class WithdrawGiveTokenCall__Outputs {
  _call: WithdrawGiveTokenCall;

  constructor(call: WithdrawGiveTokenCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _moloch(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _giveToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _getToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
